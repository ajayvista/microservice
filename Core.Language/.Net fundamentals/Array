Array
-----

Two unsorted string arrays contain some common elements - if capitalization is ignored. 

For example: 

string[] s1 = new string[] {"YYY", "BBB", "AAA", "DDD", "CCC", "XXX", "ZZZ"};
string[] s2 = new string[] {"EEE", "fff", "xxx", "aab", "BBb", "cCC", "yyy", "YZZ"};

How can the elements from the first array that match those in the second array be obtained in a new array with a single line of code? 
The code should ignore the case (capitalization), which means that "yyy" should match "YYY". 

string[] commonElements = s1.Intersect(s2, StringComparer.CurrentCultureIgnoreCase).ToArray();

--------------------

How can the unique values in both arrays be combined with a one-line LINQ statement? 
int[] array1 = { 8, 4, 2, 1, 16 };
int[] array2 = { 9, 4, 2, 1, 15 };

The collection to be returned should contain all the values from both arrays, but no duplicates of any number. 

var combinedVals = array1.Union(array2);


--------------------
How can the list of lists be flattened into a single collection by using a one-line LINQ statement? 

A list of lists is defined as: List<List<string>> bouquets = new List<List<string>>()
{
   new List<string> { "sunflower", "daisy", "daffodil" },
   new List<string> { "tulip", "rose", "orchid" },
   new List<string> { "lilac", "iris", }
};

IEnumerable<string> query2 = bouquets.SelectMany(bq => bq);

---------------------------
How can the two arrays be compared for value equality by using a one-line LINQ statement? bool sequenceEqual = numbers1.

Two int arrays are defined as: int[] numbers1 = Enumerable.Range(10, 10).ToArray();
int[] numbers2 = Enumerable.Range(10, 10).ToArray();

-----------------------------
How can all the values in withdrawals be subtracted from startBalance by using a one-line LINQ statement? 

A variable specifying the starting balance of a checking account and an array containing withdrawals from a checking account are defined as: double startBalance = 300.0;

int[] withdrawals = { 20, 10, 40, 50, 10, 70, 30 };

double endBalance = withdrawals.Aggregate(startBalance, (balance, nextWithdrawal) => balance - nextWithdrawal); 

Each element within withdrawals is subtracted from startBalance. The balance variable is used to hold the temporary balance as each value is subtracted. The variable endBalance holds the final result of the operation.

-----------------------