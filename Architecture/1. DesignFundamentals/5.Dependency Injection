5.Dependency Injection

High-level modules should not depend on low-level modules. Both should depend on abstractions.
Abstractions should not depend upon details. Details should not depend upon abstractions.

Let’s look at a simple explanation of this using what’s called “poor man’s dependency injection”. This code shows a common scenario of new-ing up things that you need, in this case it’s a logger.

poor
class Program
{
    static void Main(string[] args)
    {
        var processor = new GizmoProcessor();
    }
}
 
public class GizmoProcessor
{
    public void Process()
    {
        // do something
        var logger = new TextLogger();
        logger.WriteLogMessage("Something happened");
    }
}
 
public class TextLogger
{
    public void WriteLogMessage(string Message)
    { }
}

----poorly injected dependency

class Program
{
    static void Main(string[] args)
    {
        var processor = new GizmoProcessor(new TextLogger());
    }
}

public class GizmoProcessor : IGizmoProcessor
{
    private readonly ILogger _logger;
    public GizmoProcessor(ILogger logger)
    {
            _logger = logger;    
    }
 
    public void Process()
    {
        // do something
        _logger.WriteLogMessage("Something happened");
    }
}
 
public class TextLogger : ILogger
{
    public void WriteLogMessage(string Message)
    { }
}
 
public interface ILogger
{
    void WriteLogMessage(string Message);
}


-------using IoC------


static void Main(string[] args)
{
     var collection = new ServiceCollection();
     collection.AddScoped<ILogger, TextLogger>();
     collection.AddScoped<IGizmoProcessor, GizmoProcessor>();
     
     var serviceProvider = collection.BuildServiceProvider();
     var processor = serviceProvider.GetService<IGizmoProcessor>();
     ...do somthing---
     serviceProvider.Dispose();
}