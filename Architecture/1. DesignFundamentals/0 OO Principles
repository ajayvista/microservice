OOPS Principles
----------------
Encapsulation (Encapsulation is the mechanism of hiding of data implementation by restricting access to public methods.)
Encapsulation has to do with disallowing access to or knowledge of internal structures of an implementation. (We don't care or need to see how it works, only that it does.)

Abstraction has to do with separating interface from implementation. (We don't care what it is, we care that it works a certain way.)
Abstraction is the concept of describing something in simpler terms, i.e abstracting away the details, in order to focus on what is important (This is also seen in abstract art, for example, where the artist focuses on the building blocks of images, such as colour or shapes). The same idea translates to OOP by using an inheritance hierarchy, where more abstract concepts are at the top and more concrete ideas, at the bottom, build upon their abstractions. At its most abstract level there is no implementation details at all and perhaps very few commonalities, which are added as the abstraction decreases.

Inheritance (In derived classes we can reuse the code of existing super classes.)

Aggregation (one class should not know the inner details of another in order to use it, just knowing the interfaces should be good enough. Using abstract class/Interface we express the intent of the class rather than the actual implementation. )

Polymorphism (Static polymorphism is achieved using method overloading and dynamic polymorphism using method overriding.)

-----------------<--->--------------<---->------------<---->----<---->---

When should I use—and not use—design patterns?

KISS first, patterns later, maybe much later. A pattern is a state of mind, mostly. Don't ever try to force your code into a specific pattern, rather notice which patterns start to crystalise out of your code and help them along a bit.

OOPS vs SOLID
Object-oriented programming is a programming form which is based on the idea of "objects". Rounded up pieces of code that describe properties (width, time, position...) and behavior (change width, display time, calculate position...) of required entities that work together to solve a specific problem. SOLID is a set of principles that help you design a solution for a specific problem in the object-oriented domain. 

GOF (Gang of Four) Design Patterns 
The Gang of Four are the four authors of the book, "Design Patterns: Elements of Reusable Object-Oriented Software".The Gang of Four are the authors of the book, "Design Patterns: Elements of Reusable Object-Oriented Software". This important book describes various development techniques and pitfalls in addition to providing twenty-three object-oriented programming design patterns. The four authors were Erich Gamma, Richard Helm, Ralph Johnson and John Vlissides.

Gang of Four Design Patterns
This section gives a high-level description of the twenty-three design patterns described by the Gang of Four. 

What is DRY? 

DRY stands for Don’t Repeat Yourself. It promotes concept of code reusability. In DRY pattern, developers build libraries and share these libraries. This sharing can result in tight coupling. DRY should be a concern within a Microservice implementation. But across 2-3 Microservices, you can ignore the DRY. The basic design principle behind DRY is that we should not try to reinvent the wheel. At the same time, we should not share the same wheel for multiple purposes.

Powerhouse, Knowledge. Top 50 Microservices Interview Questions & Answers: Good Collection of Questions Faced in Architect Level Technical Interviews (updated 2020 version) . Kindle Edition. 


SOLID Principles
----------------
S - Single-responsiblity principle.
O - Open-closed principle.
L - Liskov substitution principle.
I - Interface segregation principle.
D - Dependency Inversion Principle.


Server side pattern
Repository, Generic Repository, Unit of Work 
DTO

Can we create private abstract method in abstract class?

Abstract methods in an abstract class cannot be private but can be of specifiers public, protected or default. Similarly, any class cannot be protected or private (can be only public or default). So by this rule, an abstract class cannot be private.


CLSComplaint?


What is the virtual keyword used for? 

The virtual keyword is used to indicate that a method may be overridden in a derived class. If a method with the same signature is defined in a derived class and the base class has not marked the method as virtual, then the base class method is hidden in the derived class.


1. What is separation-of-concerns?
2. Don't repeat yourself
3. What is OOP message passing?

The idea of message passing contrasts sharply with the concept of exposing the inner details of a class like fields which allows an outside user to implement functionality that should really be consolidated within the class. One reason for this is so that other developers will have a chance of reusing that functionality. Another reason is to simplify maintenance so that functionality won't be duplicated in other locations within the codebase.

4. What is the difference between association, aggregation and composition?

Association - I have a relationship with an object.  Foo uses Bar

public class Foo : Bar {

};

Composition - I own an object and I am responsible for its lifetime. When Foo dies, so does Bar

public class Foo {
    private Bar bar = new Bar(); 
}

Aggregation - I have an object which I've borrowed from someone else. When Foo dies, Bar may live on.

public class Foo { 
    private Bar bar; 
    Foo(Bar bar) { 
       this.bar = bar; 
    }
}


A House [is a] Building (inheritance);
A House [has a] Room (composition);
A House [has an] occupant (aggregation).

The difference between (2) and (3) is subtle yet important to differentiate. Together they are forms of association. What's the difference? Composition implies the child object cannot live out of the context of the parent (destroy the house and rooms disappear) whereas aggregation implies the child can exist on its own (destroy the house and the occupant goes elsewhere).


5. Inversion of Control vs Dependency Injection

Inversion of Control (IoC) means that objects do not create other objects on which they rely to do their work. Instead, they get the objects that they need from an outside source (for example, an xml configuration file).

Dependency Injection (DI) means that this is done without the object intervention, usually by a framework component that passes constructor parameters and set properties.




-----------